#include <bits/stdc++.h>
using namespace std;
using ll = long long;

// Y-combinator{{{
namespace std {
  template<class Fun>
    class y_combinator_result {
      Fun fun_;
      public:
      template<class T>
        explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}

      template<class ...Args>
        decltype(auto) operator()(Args &&...args) {
          return fun_(std::ref(*this), std::forward<Args>(args)...);
        }
    };

  template<class Fun>
    decltype(auto) y_combinator(Fun &&fun) {
      return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));
    }
} // namespace std}}}

int main() {
  int n, q; cin >> n >> q;
  string s; cin >> s;
  s = '(' + s + ')';
  vector<bool> ignore(s.size(), false);
  stack<int> opens;
  for (int i = 1; i <= n; i++) {
    if (s[i] == '(') {
      opens.push(i);
    }
    else {
      if (!opens.empty()) {
        opens.pop();
      }
      else ignore[i] = true;
    }
  }
  while (!opens.empty()) {
    ignore[opens.top()] = true;
    opens.pop();
  }
  vector<vector<int>> adj(n+1);
  vector<int> end(n+1, -1);
  for (int i = 0; i <= n+1; i++) {
    if (ignore[i]) continue;
    if (s[i] == '(') {
      if (!opens.empty()) {
        adj[opens.top()].push_back(i);
      }
      opens.push(i);
    }
    else {
      assert(!opens.empty());
      end[i] = opens.top();
      opens.pop();
    }
  }
  auto dfs = y_combinator([&](auto dfs, int i, int 

  while (q--) {
    int t, l, r; cin >> t >> l >> r;
  }
}
