# -*- mode: snippet -*-
# name: ModCombo
# key: ModCombo
# --
namespace ModCombinatorics { // {{{
  vector<int> inv, _fac, _ifac;
  template<size_t N, int MOD>
    void init() {
      inv.resize(N);
      _fac.resize(N);
      _ifac.resize(N);
      inv[0] = inv[1] = 1;
      for (size_t i = 2; i < N; i++) {
        inv[i] = (MOD - (1LL * (MOD/i) * inv[MOD%i]) % MOD) % MOD;
      }
      _fac[0] = _ifac[0] = 1;
      for (size_t i = 1; i < N; i++) {
        _fac[i] = (1LL * i * _fac[i-1]) % MOD;
        _ifac[i] = (1LL * _ifac[i-1] * inv[i]) % MOD;
      }
    }

  mint choose(int n, int k) {
    if (n < k || k < 0) return 0;
    return mint(1) * _fac[n] * _ifac[k] * _ifac[n-k];
  }

  mint fac(int n) {
    return mint(_fac[n]);
  }

  mint ifac(int n) {
    return mint(_ifac[n]);
  }
};
// }}}
namespace MC = ModCombinatorics;